{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/hadilaasi/stpe_project/stpe/src/wordcount.js\";\nimport React, { Component } from 'react';\nexport default class WordCount extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: null\n    };\n    this.handleKeypress = this.handleKeypress.bind(this);\n    this._onFocus = this._onFocus.bind(this);\n    this._onBlur = this._onBlur.bind(this);\n    this.setValue = this.setValue.bind(this);\n    this.startPayment = this.startPayment.bind(this);\n    this.placeholder = \"1. Call family \\n2. Finish Stripe Assignment \\n\";\n    this.startValue = \"1. \";\n    this.textInput = /*#__PURE__*/React.createRef();\n    this.costPerLine = 1.25;\n  }\n\n  handleKeypress(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  componentDidMount() {\n    this.textInput.current.placeholder = this.placeholder;\n  }\n\n  setValue(newValue) {\n    this.textInput.current.value = newValue;\n    this.state.value = newValue;\n  }\n\n  _onFocus() {\n    if (!this.state.value) {\n      this.setValue(this.startValue);\n    }\n  }\n\n  _onBlur() {\n    if (this.state.value == this.startValue) {\n      this.setValue(\"\");\n    }\n  }\n\n  calculateLineCount(text) {\n    return text ? text.split(\"\\n\").length : 0;\n  }\n\n  startPayment() {\n    if (!this.state.value || this.state.value == \"\") {\n      alert(\"You haven't added any items!\");\n    }\n  }\n\n  render() {\n    let count = 0,\n        lineCount = this.state.value ? this.calculateLineCount(this.state.value) : 0,\n        totalCost = lineCount * this.costPerLine;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"itemsList\",\n        onChange: event => this.handleKeypress(event),\n        onFocus: this._onFocus,\n        onBlur: this._onBlur,\n        ref: this.textInput,\n        children: this.state.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"pricing\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Number of Items: \", lineCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Cost Per Item: \\xA3\", this.costPerLine]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"total\",\n          children: [\"Total Cost: \\xA3\", totalCost]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        id: \"orderButton\",\n        onClick: this.startPayment,\n        children: [\"Order Now for \\xA3\", totalCost, \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/hadilaasi/stpe_project/stpe/src/wordcount.js"],"names":["React","Component","WordCount","constructor","props","state","value","handleKeypress","bind","_onFocus","_onBlur","setValue","startPayment","placeholder","startValue","textInput","createRef","costPerLine","event","setState","target","componentDidMount","current","newValue","calculateLineCount","text","split","length","alert","render","count","lineCount","totalCost"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\n\nexport default class WordCount extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        value : null\n      }\n      this.handleKeypress = this.handleKeypress.bind(this);\n      this._onFocus = this._onFocus.bind(this);\n      this._onBlur = this._onBlur.bind(this);\n      this.setValue = this.setValue.bind(this);\n      this.startPayment = this.startPayment.bind(this);\n\n      this.placeholder = \"1. Call family \\n2. Finish Stripe Assignment \\n\";\n      this.startValue = \"1. \";\n      this.textInput = React.createRef();\n      this.costPerLine = 1.25;\n    }\n    \n    handleKeypress(event) {\n      this.setState({ value:event.target.value });\n    }\n\n    componentDidMount() {\n      this.textInput.current.placeholder = this.placeholder\n    }\n\n    setValue(newValue){\n      this.textInput.current.value = newValue\n      this.state.value = newValue\n    }\n\n    _onFocus() {\n      if(!this.state.value){\n        this.setValue(this.startValue);\n      }\n    }\n\n    _onBlur() {\n      if(this.state.value == this.startValue){\n        this.setValue(\"\")\n      }\n    }\n\n    calculateLineCount(text) {\n      return text?text.split(\"\\n\").length:0;\n    }\n\n    startPayment(){\n      if(!this.state.value || this.state.value == \"\"){\n        alert(\"You haven't added any items!\")\n      }\n    }\n\n    render(){\n      let count = 0,\n          lineCount = this.state.value?this.calculateLineCount(this.state.value):0,\n          totalCost = lineCount * this.costPerLine\n      return(\n        <div>\n          <textarea \n            id=\"itemsList\" \n            onChange={(event)=>this.handleKeypress(event)} \n            onFocus={this._onFocus} \n            onBlur={this._onBlur}\n            ref={this.textInput}\n          >\n            {this.state.value}\n          </textarea>\n          <div id=\"pricing\">\n            <p>Number of Items: {lineCount}</p>\n            <p>Cost Per Item: £{this.costPerLine}</p>\n            <p id=\"total\">Total Cost: £{totalCost}</p>\n          </div>\n          <button type=\"button\" id=\"orderButton\" onClick={this.startPayment}>Order Now for £{totalCost}!</button>\n        </div>\n      );\n    }\n  }"]},"metadata":{},"sourceType":"module"}